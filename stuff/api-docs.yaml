openapi: 3.0.1
info:
  title: Marvel API
  version: 1.0.0-SNAPSHOT
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Character API
    description: Provides methods for working with characters
  - name: Comic API
    description: Provides methods for working with comics
paths:
  /v1/public/comics:
    get:
      tags:
        - Comic API
      summary: Return all comics
      description: "Returns a page with all comics, filtering by the parameters size,\
        \ page, sort is available"
      operationId: getPageOfComics
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Comics found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComic'
    put:
      tags:
        - Comic API
      summary: Update an existing comic
      operationId: updateComic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comic'
        required: true
      responses:
        "404":
          description: Comic not exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comic'
        "200":
          description: Comic updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comic'
    post:
      tags:
        - Comic API
      summary: Insert a new comic
      operationId: insertComic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comic'
        required: true
      responses:
        "422":
          description: Comic already exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comic'
        "201":
          description: Comic created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comic'
  /v1/public/characters:
    get:
      tags:
        - Character API
      summary: Return all characters
      description: "Returns a page with all characters, filtering by the parameters\
        \ size, page, sort is available"
      operationId: getPageOfCharacters
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Characters found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCharacter'
    put:
      tags:
        - Character API
      summary: Update an existing character
      operationId: updateCharacter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        "200":
          description: Character updated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Character'
        "404":
          description: Character not exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Character'
    post:
      tags:
        - Character API
      summary: Insert a new character
      operationId: insertCharacter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        "422":
          description: Character already exist
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Character'
        "201":
          description: Character created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Character'
  /v1/public/comics/{id}:
    get:
      tags:
        - Comic API
      summary: Return comic by id
      operationId: getComicById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Comic found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comic'
        "404":
          description: Comic not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comic'
  /v1/public/comics/{id}/characters:
    get:
      tags:
        - Comic API
      summary: Return characters by comic id
      description: "Returns a page with all comic characters, filtering by the parameters\
        \ size, page, sort is available"
      operationId: getComicsByCharacterId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Characters found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCharacter'
        "404":
          description: Characters not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCharacter'
  /v1/public/comics/search:
    get:
      tags:
        - Comic API
      summary: Return comics by title
      description: "Returns comics, if exist. Search in title field"
      operationId: getCharacterByName
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Comics not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComic'
        "200":
          description: Comics probably found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComic'
  /v1/public/characters/{id}:
    get:
      tags:
        - Character API
      summary: Return character by id
      operationId: getCharacterById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Character found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        "404":
          description: Character not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
  /v1/public/characters/{id}/comics:
    get:
      tags:
        - Character API
      summary: Return comics by character id
      description: "Returns a page with all character comics, filtering by the parameters\
        \ size, page, sort is available"
      operationId: getComicsByCharacterId_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Comics not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComic'
        "200":
          description: Comics found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComic'
  /v1/public/characters/search:
    get:
      tags:
        - Character API
      summary: Return character by name
      description: "Returns character, if exist. Search in name and description field"
      operationId: getCharacterByName_1
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Character not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCharacter'
        "200":
          description: Character probably found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageCharacter'
components:
  schemas:
    Character:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        thumbnail:
          $ref: '#/components/schemas/Thumbnail'
        comics:
          type: array
          items:
            $ref: '#/components/schemas/Comic'
    Comic:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        characters:
          type: array
          items:
            $ref: '#/components/schemas/Character'
    Thumbnail:
      type: object
      properties:
        path:
          type: string
        extension:
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageComic:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: '#/components/schemas/Pageable'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Comic'
        empty:
          type: boolean
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    PageCharacter:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: '#/components/schemas/Pageable'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Character'
        empty:
          type: boolean
